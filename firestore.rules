rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && 
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }
    
    function isGroupOwner(groupId) {
      return isAuthenticated() && 
             request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId;
    }
    
    function isGroupMemberOrOwner(groupId) {
      return isGroupMember(groupId) || isGroupOwner(groupId);
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read and write their own document
      allow read, write: if isOwner(userId);
      
      // Group members can read basic user info for other group members
      // This allows reading user profiles for group interactions within shared groups
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     // User can read other users if they share at least one group
                     // This is a simplified check - in practice you'd want more restrictive logic
                     request.auth.uid != userId;
    }
    
    // Groups collection
    match /groups/{groupId} {
      // Group members can read the group, or any authenticated user (for join functionality)
      allow read: if isAuthenticated() && (
                     isGroupMemberOrOwner(groupId) ||
                     // Allow reading for invite code lookups - in practice you'd want to restrict this more
                     true
                   );
      
      // Group owner can update group details
      allow update: if isGroupOwner(groupId) && 
                       // Prevent changing owner maliciously
                       request.resource.data.ownerId == resource.data.ownerId;
      
      // Allow users to add themselves to groups via invite code
      allow update: if isAuthenticated() &&
                       // User can only add themselves to memberIds
                       request.auth.uid in request.resource.data.memberIds &&
                       !(request.auth.uid in resource.data.memberIds) &&
                       // Preserve all other fields
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'updatedAt']) &&
                       // All existing members remain
                       resource.data.memberIds.toSet().difference(request.resource.data.memberIds.toSet()).size() == 0;
      
      // Only group owner can delete the group
      allow delete: if isGroupOwner(groupId);
      
      // Anyone authenticated can create a group (they become the owner)
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.memberIds is list &&
                       request.auth.uid in request.resource.data.memberIds;
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      // Users can read tasks where they are involved or unassigned tasks
      allow read: if isAuthenticated() && (
                     request.auth.uid == resource.data.assignedTo ||
                     request.auth.uid == resource.data.assignedBy ||
                     resource.data.assignedTo == 'unassigned' ||
                     // Or they are a member of the group
                     (exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                      isGroupMemberOrOwner(resource.data.groupId))
                   );
      
      // Group members can create tasks
      allow create: if isAuthenticated() && 
                       request.resource.data.assignedBy == request.auth.uid &&
                       exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
                       isGroupMemberOrOwner(request.resource.data.groupId);
      
      // Task assignee can update status, assigner can update task details
      allow update: if isAuthenticated() && (
                       // Assignee can update status (including taking unassigned tasks)
                       (request.auth.uid == resource.data.assignedTo ||
                        (resource.data.assignedTo == 'unassigned' && 
                         request.resource.data.assignedTo == request.auth.uid)) ||
                       // Assigner can update task details
                       (request.auth.uid == resource.data.assignedBy) ||
                       // Group owner can manage all tasks
                       (exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                        isGroupOwner(resource.data.groupId))
                     );
      
      // Only assigner or group owner can delete tasks
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == resource.data.assignedBy ||
                        (exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                         isGroupOwner(resource.data.groupId)));
    }
    
    // Wishlist items collection
    match /wishlistItems/{itemId} {
      // Users can read their own wishlist items
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      
      // Group members can read wishlist items in their groups
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                     isGroupMemberOrOwner(resource.data.groupId);
      
      // Users can create wishlist items for themselves
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
                       isGroupMemberOrOwner(request.resource.data.groupId);
      
      // Users can update/delete their own wishlist items
      allow update, delete: if isAuthenticated() && 
                               request.auth.uid == resource.data.userId;
      
      // Group members can update status when gifting items
      allow update: if isAuthenticated() && 
                       exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                       isGroupMemberOrOwner(resource.data.groupId) &&
                       request.resource.data.status == 'gifted' &&
                       request.resource.data.giftedBy == request.auth.uid;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      
      // System/authenticated users can create notifications
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }
    
  }
}